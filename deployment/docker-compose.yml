version: '3.8'

services:
  backend:
    build:
      context: ..
      dockerfile: deployment/backend.Dockerfile
    image: rfm-architecture-backend:latest
    container_name: rfm-backend
    restart: unless-stopped
    ports:
      - "8000:8000"  # API
      - "8765:8765"  # WebSocket server
    volumes:
      - backend_data:/app/data
      - ./logs:/app/logs
      - ./certs:/app/certs
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-rfm}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-change-me-in-production}
      - JWT_ALGORITHM=HS256
      - JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
      - JWT_REFRESH_TOKEN_EXPIRE_DAYS=7
      - SSL_CERT_PATH=/app/certs/server.crt
      - SSL_KEY_PATH=/app/certs/server.key
      - ALLOWED_ORIGINS=http://localhost:3000,https://localhost:3000
      - LOG_LEVEL=info
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - rfm-network

  frontend:
    build:
      context: ..
      dockerfile: deployment/frontend.Dockerfile
    image: rfm-architecture-frontend:latest
    container_name: rfm-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
      - VITE_WS_URL=wss://localhost:8765
    depends_on:
      - backend
    networks:
      - rfm-network

  db:
    image: postgres:14-alpine
    container_name: rfm-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-rfm}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-rfm}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rfm-network

  monitoring:
    build:
      context: ..
      dockerfile: deployment/monitoring.Dockerfile
    image: rfm-architecture-monitoring:latest
    container_name: rfm-monitoring
    restart: unless-stopped
    ports:
      - "3001:3000"  # Grafana
      - "9090:9090"  # Prometheus
    volumes:
      - prometheus_data:/prometheus
      - grafana_data:/var/lib/grafana
    depends_on:
      - backend
    networks:
      - rfm-network

volumes:
  backend_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  rfm-network:
    driver: bridge